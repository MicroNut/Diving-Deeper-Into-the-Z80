-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DRIVER_INV_GATE is
  
  port (
    p_out: out std_logic;
    p_in: in std_logic;
    sel: in std_logic );
end DRIVER_INV_GATE;

architecture Behavioral of DRIVER_INV_GATE is
begin
  p_out <= p_in when sel = '1' else 'Z';
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity DIG_D_FF_BUS is
  generic (
    Default: integer; 
    Bits: integer );
  port ( D  : in std_logic_vector ((Bits-1) downto 0);
         C  : in std_logic;
         Q  : out std_logic_vector ((Bits-1) downto 0);
         notQ : out std_logic_vector ((Bits-1) downto 0) );
end DIG_D_FF_BUS;

architecture Behavioral of DIG_D_FF_BUS is
   signal state : std_logic_vector ((Bits-1) downto 0) := std_logic_vector(to_unsigned(Default, Bits));
begin
   Q    <= state;
   notQ <= NOT( state );

   process(C)
   begin
      if rising_edge(C) then
        state  <= D;
      end if;
   end process;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity DRIVER_INV_GATE_BUS is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    p_in: in std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic );
end DRIVER_INV_GATE_BUS;

architecture Behavioral of DRIVER_INV_GATE_BUS is
begin
  p_out <= p_in when sel = '1' else (others => 'Z');
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    oe: in std_logic;
    clk: in std_logic;
    we: in std_logic;
    db: out std_logic_vector(7 downto 0));
end main;

architecture Behavioral of main is
  signal db_temp: std_logic_vector(7 downto 0);
  signal s0: std_logic;
  signal s1: std_logic_vector(7 downto 0);
begin
  gate0: entity work.DRIVER_INV_GATE
    port map (
      p_in => clk,
      sel => we,
      p_out => s0);
  gate1: entity work.DIG_D_FF_BUS
    generic map (
      Default => 0,
      Bits => 8)
    port map (
      D => db_temp,
      C => s0,
      Q => s1);
  gate2: entity work.DRIVER_INV_GATE_BUS
    generic map (
      Bits => 8)
    port map (
      p_in => s1,
      sel => oe,
      p_out => db_temp);
  db <= db_temp;
end Behavioral;
