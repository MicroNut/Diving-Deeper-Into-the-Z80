/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Driver
(
    input in,
    input sel,
    output out
);
    assign out = (sel == 1'b1)? in : 1'bz;
endmodule
module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module DriverBus#(
    parameter Bits = 2
)
(
    input [(Bits-1):0] in,
    input sel,
    output [(Bits-1):0] out
);
    assign out = (sel == 1'b1)? in : {Bits{1'bz}};
endmodule

module reg_latch (
  input oe,
  input clk,
  input we,
  output [7:0] db
);
  wire [7:0] db_temp;
  wire s0;
  wire [7:0] s1;
  Driver Driver_i0 (
    .in( clk ),
    .sel( we ),
    .out( s0 )
  );
  DIG_D_FF_Nbit #(
    .Bits(8),
    .Default(0)
  )
  DIG_D_FF_Nbit_i1 (
    .D( db_temp ),
    .C( s0 ),
    .Q( s1 )
  );
  DriverBus #(
    .Bits(8)
  )
  DriverBus_i2 (
    .in( s1 ),
    .sel( oe ),
    .out( db_temp )
  );
  assign db = db_temp;
endmodule
